import pytest
import testing_tools as tt


# Cmdline options
def pytest_addoption(parser):
    parser.addoption(
        "--test-traces",
        action="store_true",
        help="Print to console and HTML report only traces generated by test code",
    )


# Fixtures
@pytest.fixture(scope="class")
def execute_rust(test_config, test_case_name):
    return tt.execute_and_parse(test_config, test_case_name, expect_hang=False)


@pytest.fixture(scope="class")
def execute_rust_expect_hang(test_config, test_case_name):
    return tt.execute_and_parse(test_config, test_case_name, expect_hang=True)


@pytest.fixture(scope="class")
def targeted_test_results(unfiltered_test_results):
    [*results] = unfiltered_test_results.get_logs_by_field(
        field="target", pattern="rust_test_scenarios.*"
    )
    return tt.LogContainer.from_entries(results)


@pytest.fixture(scope="class")
def test_results(targeted_test_results):
    [*results] = targeted_test_results.get_logs_by_field(field="level", pattern="INFO")
    return tt.LogContainer.from_entries(results)


# Console log and HTML report
@pytest.fixture(scope="function", autouse=True)
def print_to_report(execute_rust, targeted_test_results, request):
    if request.config.getoption("--test-traces"):
        traces = targeted_test_results
    else:
        traces = execute_rust

    for msg in traces:
        print(str(msg))


def pytest_html_report_title(report):
    # Change report title
    # report.title = "Report1"
    ...


def pytest_html_results_table_header(cells):
    # Create additional table headers
    cells.insert(3, "<th>Test Case Name</th>")
    cells.insert(2, "<th>Description</th>")
    cells.insert(1, "<th>Test Input</th>")


def pytest_html_results_table_row(report, cells):
    # Create additional table columns with TC __doc__ and execution date
    cells.insert(3, f"<td><pre>{report.tc}</pre></td>")
    cells.insert(2, f"<td><pre>{report.description}</pre></td>")
    cells.insert(
        1,
        f'<td><pre style="white-space:pre-wrap;word-wrap:break-word">{report.input}</pre></td>',
    )


@pytest.hookimpl(hookwrapper=True)
def pytest_runtest_makereport(item, call):
    # Extract TC's data
    outcome = yield
    report = outcome.get_result()
    report.description = str(item.function.__doc__)
    report.tc = item.funcargs.get("test_case_name", "")
    report.input = item.funcargs.get("test_config", "")
