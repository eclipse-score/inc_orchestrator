import json
from pathlib import Path

import pytest
from testing_utils import select_bin_path, cargo_build


# Cmdline options
def pytest_addoption(parser):
    parser.addoption(
        "--test-traces",
        action="store_true",
        help="Print to console and HTML report only traces generated by test code.",
    )
    parser.addoption(
        "--bin-path",
        type=Path,
        help="Path to test scenarios executable. Search is performed by default.",
    )
    parser.addoption(
        "--bin-name",
        type=str,
        default="rust_test_scenarios",
        help='Test scenario executable name. Overwritten by "--bin-path".',
    )
    parser.addoption(
        "--build-scenarios",
        action="store_true",
        help="Execute cargo build for test scenarios binary",
    )
    parser.addoption(
        "--build-scenarios-timeout",
        type=float,
        default=180.0,
        help='"cargo build" timeout in seconds. Default: %(default)s',
    )
    parser.addoption(
        "--default-execution-timeout",
        type=float,
        default=5.0,
        help="Default execution timeout in seconds. Default: %(default)s",
    )


# Hooks
@pytest.hookimpl(tryfirst=True)
def pytest_sessionstart(session):
    try:
        # Build scenarios.
        bin_name = select_bin_path(session.config, expect_exists=False).name
        if session.config.getoption("--build-scenarios"):
            print("Building test scenarios binary...")
            build_timeout = session.config.getoption("--build-scenarios-timeout")
            cargo_build(bin_name, build_timeout=build_timeout)

    except Exception as e:
        pytest.exit(str(e), returncode=1)


def pytest_html_report_title(report):
    # Change report title
    # report.title = "Report1"
    ...


def pytest_html_results_table_header(cells):
    # Create additional table headers
    cells.insert(3, "<th>Test Case Name</th>")
    cells.insert(2, "<th>Description</th>")
    cells.insert(1, "<th>Test Input</th>")


def pytest_html_results_table_row(report, cells):
    # Create additional table columns with TC __doc__ and execution date
    cells.insert(3, f"<td><pre>{report.tc}</pre></td>")
    cells.insert(2, f"<td><pre>{report.description}</pre></td>")
    cells.insert(
        1,
        f'<td><pre style="white-space:pre-wrap;word-wrap:break-word">{json.dumps(report.input)}</pre></td>',
    )


@pytest.hookimpl(hookwrapper=True)
def pytest_runtest_makereport(item, call):
    # Extract TC's data
    outcome = yield
    report = outcome.get_result()
    report.description = str(item.function.__doc__)
    report.tc = item.funcargs.get("scenario_name", "")
    report.input = item.funcargs.get("test_config", "")
